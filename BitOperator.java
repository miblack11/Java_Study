public class BitOperator{
	public static void main(String[] args){
		//位运算操作解析
		//  &（按位与）
		//两个数都是1，则为1，否则为0
		//  |（按位或）
		//  两个数有一个为1，就为1
		//  ^ (按位异或)
		//  两个数不一样结果为1，否则为0
		//  ~(按位取反)
		//  0->1, 1->0
		//位运算规则
		//1. 二进制的最高位是符号位: 0表示正数，1表示负数(老韩口诀: 0->01-> -)
		//2. 正数的原码，反码，补码都一样(三码合- -)
		//3. 负数的反码=它的原码符号位不变，其它位取反(0->1,1->0)
		//4. 负数的补码=它的反码+1 ,负数的反码=负数的补码- 1
		//5. 0的反码，补码都是0
		//6. java没有无符号数，换言之，java中的数都是有符号的
		//7. 在计算机运算的时候，都是以补码的方式来运算的
		//8. 当我们看运算结果的时候，要看他的原码(重点)
		//
		//
		//解析 正数： 1.得到原码 2.得到补码
		//2的原码 00000000 00000000 00000000 00000010(三码合一)
		//2的补码 00000000 00000000 00000000 00000010
		//3的原码 00000000 00000000 00000000 00000010
		//3的补码 00000000 00000000 00000000 00000010
		//执行&操作 00000000 00000000 00000000 00000010(补码) == (原码)
		System.out.println(2&3);//2
		//解析 负数： 1.得到原码 2.得到反码(原码符号位不变，其它位取反) 3.得到补码(反码+1)
		//-2的原码 10000000 00000000 00000000 00000010
		//-2的反码 11111111 11111111 11111111 11111101
		//-2的补码 11111111 11111111 11111111 11111110
		//执行~操作
		//        00000000 00000000 00000000 00000001(补码)==(原码)
		System.out.println(~-2);//1
		//2的原码 00000000 00000000 00000000 00000010(三码合一)
		//2的补码 00000000 00000000 00000000 00000010
		//执行~操作
		//        11111111 11111111 11111111 11111101(运算后的补码)
		//        11111111 11111111 11111111 11111100(补码-1得到反码)  
		//        10000000 00000000 00000000 00000011(原码)(符号位不变，取反)  
		System.out.println(~2);//-3
		//解析
		//2的补码 00000000 00000000 00000000 00000010
		//3的补码 00000000 00000000 00000000 00000011
		//执行|操作
		//        00000000 00000000 00000000 00000011(补码)==(原码)
		System.out.println(2|3);//3
		//解析
		//2的补码 00000000 00000000 00000000 00000010
		//3的补码 00000000 00000000 00000000 00000011
		//执行^操作
		//        00000000 00000000 00000000 00000001
		System.out.println(2^3);//1
	}
}